USE sakila;

-- List the number of films per category.
SELECT 
	c.name,
    COUNT(fc.film_id) AS number_of_films
FROM category as c
LEFT JOIN film_category as fc
ON	fc.category_id = c.category_id
GROUP BY c.name;

-- Retrieve the store ID, city, and country for each store.
SELECT 
	s.store_id,    
    c.city,
    country.country
from 
	store as s
LEFT JOIN address as a
ON s.address_id = a.address_id
LEFT JOIN city as c
on c.city_id = a.city_id
LEFT JOIN country 
ON c.country_id = country.country_id;
	
-- Calculate the total revenue generated by each store in dollars.
SELECT
	s.store_id,
    SUM(p.amount) as total_revenue
FROM
	staff as s
LEFT JOIN payment as p
ON s.staff_id = p.staff_id 
GROUP BY s.store_id;

-- Determine the average running time of films for each category.
SELECT
	c.name,
    AVG(length) as average_length
FROM
	category as c
LEFT JOIN film_category as fc
ON fc.category_id = c.category_id
RIGHT JOIN film as f
on fc.film_id = f.film_id
GROUP BY c.name;

-- Identify the film categories with the longest average running time.
SELECT
	c.name,
    AVG(length) as average_length
FROM
	category as c
LEFT JOIN film_category as fc
ON fc.category_id = c.category_id
RIGHT JOIN film as f
on fc.film_id = f.film_id
GROUP BY c.name
ORDER BY average_length DESC;

-- Display the top 10 most frequently rented movies in descending order.
SELECT 
	f.title,
    COUNT(rental_id) as rental_count
FROM 
	rental as r
LEFT JOIN inventory as i 
ON r.inventory_id = i.inventory_id
left join film as f
ON f.film_id = i.film_id
GROUP BY f.title
ORDER BY rental_count desc
LIMIT 10;

-- Determine if "Academy Dinosaur" can be rented from Store 1.
-- Academy Dinosaur can be rented from both stores
SELECT
	f.title,
    i.store_id
FROM 
	film as f
LEFT JOIN inventory as i 
ON i.film_id = f.film_id 
WHERE f.title = "Academy Dinosaur"
GROUP BY f.title, i.store_id;

-- Provide a list of all distinct film titles, along with their availability status in the inventory. 
-- Include a column indicating whether each title is 'Available' or 'NOT available.' 
-- Note that there are 42 titles that are not in the inventory, and this information can be obtained using a CASE statement combined with IFNULL."

SELECT 
	f.title,
	-- i.iventory_id,
    -- r.*, 
   CASE 
        WHEN
			COUNT(CASE 
					WHEN r.return_date IS NOT NULL OR r.rental_id IS NULL THEN 1 
				END) > 0 
			THEN "available"
		ELSE
			"NOT available"
	END AS availabiltiy
FROM 
	film as f
LEFT JOIN inventory as i
ON f.film_id = i.film_id
LEFT JOIN rental as r
ON i.inventory_id = r.inventory_id
GROUP BY f.title
